{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","HOC/WithAuthRedirect.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/addMesageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","messages","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,0B,oBCA3GD,EAAOC,QAAU,CAAC,SAAW,4B,qHCGzBC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,S,0BCQNE,EATI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACjC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,kBCDjBC,EAJC,SAACT,GACf,OAAO,yBAAKG,UAAWC,IAAEC,QAAQ,yBAAKF,UAAWC,IAAEM,UAAWV,EAAMW,W,iCCChEC,EAAcC,YAAiB,IAkBtBC,cAAU,CAACC,KAAM,2BAAjBD,EAhBQ,SAACd,GACpB,OACI,0BAAMgB,SAAUhB,EAAMiB,cAClB,6BACI,kBAACC,EAAA,EAAD,CACAC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBW,YAAY,qBACZf,KAAK,oBAET,6BACI,6CCcDgB,EA1BC,SAACxB,GACf,IAAIJ,EAAQI,EAAMyB,YAEdC,EAAkB9B,EAAM+B,QAAQC,KAAI,SAACC,GAAD,OACtC,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMN,GAAI2B,EAAE3B,GAAI4B,IAAKD,EAAE3B,QAEzC6B,EAAmBnC,EAAMc,SAASkB,KAAI,SAACI,GAAD,OACxC,kBAAC,EAAD,CAASrB,QAASqB,EAAErB,QAASmB,IAAKE,EAAE9B,QAQtC,OACE,yBAAKC,UAAWC,IAAEuB,SAChB,yBAAKxB,UAAWC,IAAE6B,cAAeP,GACjC,yBAAKvB,UAAWC,IAAEM,UAAWqB,GAC3B,kBAAC,EAAD,CAAef,SARD,SAACkB,GACnBlC,EAAMmC,YAAYD,EAAOE,qB,OCEdC,sBACbC,aAfoB,SAAC1C,GACrB,MAAO,CACL6B,YAAa7B,EAAM6B,gBAIE,SAACc,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,EAASC,YAAmBJ,ULPF,SAACK,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAK3C,MAAMH,OAET,kBAAC4C,EAAcE,KAAK3C,OAFI,kBAAC,IAAD,CAAUO,GAAG,eAHH,GACbqC,IAAMH,WAYtC,OAJqCH,YAAQ3C,EAAR2C,CACnCI,KKEWL,CAGbb","file":"static/js/5.6cfbc4a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__30Y50\",\"dialogsItems\":\"Dialogs_dialogsItems__O0-1j\",\"active\":\"Dialogs_active__305cX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__3ZIgQ\"};","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from \"./Message.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.dialog}><div className={s.messages}>{props.message}</div></div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport { Textarea } from '../common/FormsControls/formsControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field \r\n                component={Textarea}\r\n                validate={[required, maxLength50]}\r\n                placeholder=\"Enter your message\"\r\n                name=\"newMessageBody\" />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessageForm);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMesageForm from \"./addMesageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} id={d.id} key={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n//  let newMessageBody = state.newMessageBody;\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody)\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n      <div className={s.messages}>{messagesElements}</div>\r\n        <AddMesageForm onSubmit={addNewMessage}/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Dialogs;\r\n","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../HOC/WithAuthRedirect\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    }\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}